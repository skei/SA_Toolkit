#!/bin/bash

#----------------------------------------------------------------------
#
# defaults
#
#----------------------------------------------------------------------

CC="g++"
INPUT="build.cpp"
OUTPUT="plugin.exe"
BUILD_COUNT=""
FORMAT="EXE"
GUI="X11"
DEBUG=false
SANITIZE=false
TESTS=false
VERBOSE=false
ADDITIONAL=""
LIBRARY=false
WIN32=false
MAC=false; if [[ "$OSTYPE" == "darwin"* ]]; then MAC=true; fi
MAC_ARM=false;
MAC_INTEL=false;
if $MAC; then
  if [ "$(uname -m)" = "arm64" ]; then MAC_ARM=true; fi
  if [ "$(uname -m)" = "x86_64" ]; then MAC_INTEL=true; fi
fi

FLAGS=""
FLAGS+=" -std=gnu++17"
FLAGS+=" -Wall"
FLAGS+=" -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-variable -Wno-unused-private-field -Wno-unused-but-set-variable -Wno-narrowing"
FLAGS+=" -fno-exceptions"
FLAGS+=" -pthread"
if ! $MAC; then
  FLAGS+=" -Wl,--as-needed"
fi
#FLAGS+=" -static-libgcc"
#FLAGS+=" -static-libstdc++"

INC=""
if $MAC; then
  INC+=" -I./src"
else
  INC+=" -I../src"
fi

PRELIB=""

LIB=""
LIB+=" -lm"
#LIB+=" -ldl -lrt"

#----------------------------------------------------------------------
#
# print help
#
#----------------------------------------------------------------------

function print_help_and_exit {
  echo "usage: ./compile.sh <options>"
  echo "  -i <path>   input file name/path"
  echo "  -o <path>   output file name/path"
  echo "  -b <path>   build_count file name/path"
  echo "  -f <types>  format (all,clap,dssi,exe,exlib,ladspa,lv2,vst2,vst3)"
  echo "  -g <type>   gui (nogui,wayland,win32,x11)"
  echo "  -w          win32 (else linux)"
  echo "  -d          debug mode (else release)"
  echo "  -s          sanitize"
  echo "  -t          include tests"
  echo "  -v          verbose"
  echo "  -a <flags>  additional flags (in quotes)"
  echo "  -h, -?      this help"
  exit 1
}

#----------------------------------------------------------------------
#
# parse command line
#
#----------------------------------------------------------------------

if [ "$#" -eq 0 ]; then
  print_help_and_exit
fi

while getopts i:o:b:f:g:wdstva:h? arg
do
  A=""
  case $arg in
    i)    INPUT=$OPTARG;;
    o)    OUTPUT=$OPTARG;;
    b)    BUILD_COUNT=$OPTARG;;
    f)    FORMAT=$(echo "$OPTARG" | tr '[:lower:]' '[:upper:]');;
    g)    GUI=$(echo "$OPTARG" | tr '[:lower:]' '[:upper:]');;
    w)    WIN32=true;;
    d)    DEBUG=true;;
    s)    SANITIZE=true;;
    t)    TESTS=true;;
    v)    VERBOSE=true;;
    a)    ADDITIONAL=$OPTARG;;
    h|?)  print_help_and_exit;;
    *)    exit 1;;
  esac
done

LINUX=false; if [[ "$WIN32" != "true" ]] && [[ "$MAC" != "true" ]]; then LINUX=true; fi

#------------------------------
# -i input
#------------------------------

#if [ $INPUT = "" ]; then
#  INPUT="build.clap"
#fi

INPUT_FILE=${INPUT##*/}
INPUT_BASE=${INPUT_FILE%%.*}
INPUT_EXT=${INPUT_FILE##*.}
INPUT_DIR=${INPUT%$INPUT_FILE}

#echo ""
#echo "INPUT     : $INPUT"
#echo "INPUT_FILE: $INPUT_FILE"
#echo "INPUT_BASE: $INPUT_BASE"
#echo "INPUT_EXT : $INPUT_EXT"
#echo "INPUT_DIR : $INPUT_DIR"

#------------------------------
# -o output
#------------------------------

OUTPUT_FILE=${OUTPUT##*/}
OUTPUT_BASE=${OUTPUT_FILE%%.*}
OUTPUT_EXT=${OUTPUT_FILE##*.}
OUTPUT_DIR=${OUTPUT%$OUTPUT_FILE}

#echo "OUTPUT     : $OUTPUT"
#echo "OUTPUT_FILE: $OUTPUT_FILE"
#echo "OUTPUT_BASE: $OUTPUT_BASE"
#echo "OUTPUT_EXT : $OUTPUT_EXT"
#echo "OUTPUT_DIR : $OUTPUT_DIR" 

#if [ "$OUTPUT" = "" ]; then
#  OUTPUT=$INPUT_BASE
#fi

if [ -n "$OUTPUT_DIR" ] && [ ! -d "$OUTPUT_DIR" ]; then
    mkdir "$OUTPUT_DIR"
fi

#------------------------------
# build count
#------------------------------

if [[ "$BUILD_COUNT" != "" ]]; then
  count=0
  if test -f $BUILD_COUNT
    then
      read count < $BUILD_COUNT
  fi
  ((count=count+1))  
  echo $count > $BUILD_COUNT
  #echo build $count
  FLAGS+=" -DSAT_BUILD_COUNT=$count"
fi


#------------------------------
# -f format
#------------------------------

#if [ "$FORMAT" = "" ]; then
#  FORMAT="CLAP"
#fi

#-----

# assume LIBRARY = true
LIBRARY=true
EXELIB=false

if [[ "$FORMAT" == *"ALL"* ]]; then
  FLAGS+=" -DSAT_PLUGIN_ALL"
fi

if [[ "$FORMAT" == *"CLAP"* ]]; then
  FLAGS+=" -DSAT_PLUGIN_CLAP"
fi

if [[ "$FORMAT" == *"DSSI"* ]]; then
  FLAGS+=" -DSAT_PLUGIN_DSSI"
fi

if [[ "$FORMAT" == *"EXE"* ]]; then
  LIBRARY=false
  FLAGS+=" -DSAT_PLUGIN_EXE"
fi

if [[ "$FORMAT" == *"EXLIB"* ]]; then
  EXELIB=true
  FLAGS+=" -DSAT_PLUGIN_EXECUTABLE_LIBRARY"
fi

if [[ "$FORMAT" == *"LADSPA"* ]]; then
  FLAGS+=" -DSAT_PLUGIN_LADSPA"
fi

if [[ "$FORMAT" == *"LV2"* ]]; then
  FLAGS+=" -DSAT_PLUGIN_LV2"
fi

if [[ "$FORMAT" == *"VST2"* ]]; then
  FLAGS+=" -DSAT_PLUGIN_VST2"
fi

if [[ "$FORMAT" == *"VST3"* ]]; then
  FLAGS+=" -DSAT_PLUGIN_VST3"
  INC+=" -I../src/extern/vst3/vst3sdk"
fi

#----------

if $LIBRARY
  then
    if $EXELIB
      then
        FLAGS+=" -shared"
        FLAGS+=" -fPIC"
        #FLAGS+=" -fPIE"
        if $MAC; then  # TODO: figure out how to create an app bundle on macos
          FLAGS+=" exelib_entry_point"
        else
          FLAGS+=" -Wl,-e,exelib_entry_point"
        fi
        FLAGS+=" -DSAT_PLUGIN_EXE"
      else
        FLAGS+=" -shared"
        FLAGS+=" -fPIC"
        FLAGS+=" -DSAT_LIBRARY"
        if $MAC; then
          if $MAC_ARM; then
            FLAGS+=" -arch arm64"
          elif $MAC_INTEL; then
            FLAGS+=" -arch x86_64"
          fi
          FLAGS+=" -exported_symbols_list ./build/pre/tmp/macos-symbols.txt"
        fi
    fi
  #else
  #  FLAGS+=" -DSAT_PLUGIN_EXE"
fi

#------------------------------
# -g gui
#------------------------------

case $GUI in
  "NOGUI")
    #echo "gui = nogui"
    FLAGS+=" -DSAT_NO_GUI"
    ;;
  "WAYLAND")
    #echo "gui = win32"
    LIB+=" -lX11"
    LIB+=" -lGL"
    LIB+=" -lEGL"
    LIB+=" -lwayland-client -lwayland-egl"
    FLAGS+=" -DSAT_GUI_WAYLAND"
    ;;
  "WIN32")
    #echo "gui = win32"
    LIB+=" -lgdi32 -lmsimg32 -lopengl32"
    FLAGS+=" -DSAT_GUI_WIN32"
    ;;
  "X11")
    #echo "gui = x11"
    LIB+=" -lX11 -lX11-xcb"
    LIB+=" -lxcb -lxcb-util -lxcb-image -lxcb-cursor -lxcb-keysyms"
    LIB+=" -lxkbcommon"
    LIB+=" -lGL"
    LIB+=" -lGLX"
    #LIB+=" -lEGL"
    FLAGS+=" -DSAT_GUI_X11"
    ;;
  *)
    echo "unknown gui: $GUI";
    exit 1
    ;;
esac

#------------------------------
# -d debug
#------------------------------

if $DEBUG
  then
    FLAGS+=" -DSAT_DEBUG"
    FLAGS+=" -g"

    if ! $WIN32 && ! $MAC
      then
        FLAGS+=" -export-dynamic"
    fi

    #FLAGS+=" -export-dynamic"
    #FLAGS+=" -Wl,-Bsymbolic"

  else
    FLAGS+=" -DNDEBUG"
    FLAGS+=" -O3"
    FLAGS+=" -ffast-math"
    if ! $MAC; then
      FLAGS+=" -s"
    fi
    #FLAGS+=" -flto"
fi

#------------------------------
# -s sanitize
#------------------------------

if $SANITIZE; then
  #PRELIB+=" -lasan"
  FLAGS+=" -fsanitize=leak"
  #FLAGS+=" -fsanitize=address"
  FLAGS+=" -fno-omit-frame-pointer -fno-optimize-sibling-calls"
fi

#------------------------------
# -t tests
#------------------------------

if $TESTS; then
  FLAGS+=" -DSAT_INCLUDE_TESTS"
fi

#------------------------------
# -w win32
#------------------------------

if $WIN32; then
  CC="/usr/bin/x86_64-w64-mingw32-g++"
  FLAGS+=" -static-libgcc"
  FLAGS+=" -static-libstdc++"
  LIB+=" -lwsock32"
else
  CC="g++"
  if $MAC; then  # TODO: for now no gui on macos; timer is only used for the gui
    LIB+=" -ldl"
  else
    LIB+=" -ldl -lrt"
  fi
fi

#----------------------------------------------------------------------
#
# pre- and post- scripts for os specifc tasks
#
#----------------------------------------------------------------------

runPreSteps() {
  if $MAC; then
    source "./build/pre/pre_mac"
  elif $WIN32; then
    source "../build/pre/pre_win32"
  elif $LINUX; then
    source "../build/pre/pre_linux"
  fi
}

runPostSteps() {
  if $MAC; then
    source "./build/post/post_mac"
  elif $WIN32; then
    source "../build/post/post_win32"
  elif $LINUX; then
    source "../build/post/post_linux"
  fi
}

#----------------------------------------------------------------------
#
# compile
#
#----------------------------------------------------------------------

#echo "* format:" $FORMAT
#echo "* gui:" $GUI
#echo "* debug:" $DEBUG
#echo "* tests:" $TESTS

#echo
#echo "g++" $INPUT "-o" $OUTPUT $FLAGS $INC $LIB
#echo

if $VERBOSE; then
  echo
  echo "Verbose:"
  echo
  echo $CC $INPUT -o $OUTPUT $FLAGS $INC $PRELIB $LIB $ADDITIONAL
  echo
fi

runPreSteps
echo -n "Compile and link.. "
# This possibly will mask any warnings
compile=$($CC $INPUT -o $OUTPUT $FLAGS $INC $PRELIB $LIB $ADDITIONAL 2>&1)
if echo "$compile" | grep -iq "undefined symbols"; then
  echo "[FAILED]"
  echo "Error: Undefined symbols"
  echo "Make sure 'build/build.cpp' includes any target."
elif echo "$compile" | grep -iq "error:"; then
  echo "[FAILED]"
  echo $compile
else
  echo "[DONE]"
  runPostSteps
fi

#----------------------------------------------------------------------
#
#
#
#----------------------------------------------------------------------

# $PWD  = current path
# $0    = script name/executable
# $@    = arguments
# $#    = number of arguments?

#VAR_1="to uppercase"
#echo ${VAR_1^}
#echo ${VAR_1^^}

#VAR_2="TO  LOWERCASE!"
#echo ${VAR_2,}
#echo ${VAR_2,,}

#VAR_3="Reverse Cases"
#echo ${VAR_3~}
#echo ${VAR_3~~}
